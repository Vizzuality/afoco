/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  IndicatorFieldListResponse,
  Error,
  GetIndicatorFieldsParams,
  IndicatorFieldResponse,
  IndicatorFieldRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getIndicatorFields = (params?: GetIndicatorFieldsParams, signal?: AbortSignal) => {
  return API<IndicatorFieldListResponse>({
    url: `/indicator-fields`,
    method: 'get',
    params,
    signal,
  });
};

export const getGetIndicatorFieldsQueryKey = (params?: GetIndicatorFieldsParams) =>
  [`/indicator-fields`, ...(params ? [params] : [])] as const;

export const getGetIndicatorFieldsInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getIndicatorFields>>,
  TError = ErrorType<Error>
>(
  params?: GetIndicatorFieldsParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getIndicatorFields>>, TError, TData>;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getIndicatorFields>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIndicatorFieldsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIndicatorFields>>> = ({
    signal,
    pageParam,
  }) => getIndicatorFields({ 'pagination[page]': pageParam, ...params }, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetIndicatorFieldsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getIndicatorFields>>
>;
export type GetIndicatorFieldsInfiniteQueryError = ErrorType<Error>;

export const useGetIndicatorFieldsInfinite = <
  TData = Awaited<ReturnType<typeof getIndicatorFields>>,
  TError = ErrorType<Error>
>(
  params?: GetIndicatorFieldsParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getIndicatorFields>>, TError, TData>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetIndicatorFieldsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetIndicatorFieldsQueryOptions = <
  TData = Awaited<ReturnType<typeof getIndicatorFields>>,
  TError = ErrorType<Error>
>(
  params?: GetIndicatorFieldsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getIndicatorFields>>, TError, TData>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getIndicatorFields>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIndicatorFieldsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIndicatorFields>>> = ({ signal }) =>
    getIndicatorFields(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetIndicatorFieldsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getIndicatorFields>>
>;
export type GetIndicatorFieldsQueryError = ErrorType<Error>;

export const useGetIndicatorFields = <
  TData = Awaited<ReturnType<typeof getIndicatorFields>>,
  TError = ErrorType<Error>
>(
  params?: GetIndicatorFieldsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getIndicatorFields>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetIndicatorFieldsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postIndicatorFields = (indicatorFieldRequest: IndicatorFieldRequest) => {
  return API<IndicatorFieldResponse>({
    url: `/indicator-fields`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: indicatorFieldRequest,
  });
};

export const getPostIndicatorFieldsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postIndicatorFields>>,
    TError,
    { data: IndicatorFieldRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postIndicatorFields>>,
  TError,
  { data: IndicatorFieldRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postIndicatorFields>>,
    { data: IndicatorFieldRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postIndicatorFields(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostIndicatorFieldsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postIndicatorFields>>
>;
export type PostIndicatorFieldsMutationBody = IndicatorFieldRequest;
export type PostIndicatorFieldsMutationError = ErrorType<Error>;

export const usePostIndicatorFields = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postIndicatorFields>>,
    TError,
    { data: IndicatorFieldRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostIndicatorFieldsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getIndicatorFieldsId = (id: number, signal?: AbortSignal) => {
  return API<IndicatorFieldResponse>({ url: `/indicator-fields/${id}`, method: 'get', signal });
};

export const getGetIndicatorFieldsIdQueryKey = (id: number) => [`/indicator-fields/${id}`] as const;

export const getGetIndicatorFieldsIdInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getIndicatorFieldsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getIndicatorFieldsId>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getIndicatorFieldsId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIndicatorFieldsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIndicatorFieldsId>>> = ({ signal }) =>
    getIndicatorFieldsId(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetIndicatorFieldsIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getIndicatorFieldsId>>
>;
export type GetIndicatorFieldsIdInfiniteQueryError = ErrorType<Error>;

export const useGetIndicatorFieldsIdInfinite = <
  TData = Awaited<ReturnType<typeof getIndicatorFieldsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getIndicatorFieldsId>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetIndicatorFieldsIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetIndicatorFieldsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getIndicatorFieldsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getIndicatorFieldsId>>, TError, TData>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getIndicatorFieldsId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIndicatorFieldsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIndicatorFieldsId>>> = ({ signal }) =>
    getIndicatorFieldsId(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetIndicatorFieldsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getIndicatorFieldsId>>
>;
export type GetIndicatorFieldsIdQueryError = ErrorType<Error>;

export const useGetIndicatorFieldsId = <
  TData = Awaited<ReturnType<typeof getIndicatorFieldsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getIndicatorFieldsId>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetIndicatorFieldsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putIndicatorFieldsId = (id: number, indicatorFieldRequest: IndicatorFieldRequest) => {
  return API<IndicatorFieldResponse>({
    url: `/indicator-fields/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: indicatorFieldRequest,
  });
};

export const getPutIndicatorFieldsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putIndicatorFieldsId>>,
    TError,
    { id: number; data: IndicatorFieldRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putIndicatorFieldsId>>,
  TError,
  { id: number; data: IndicatorFieldRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putIndicatorFieldsId>>,
    { id: number; data: IndicatorFieldRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putIndicatorFieldsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutIndicatorFieldsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putIndicatorFieldsId>>
>;
export type PutIndicatorFieldsIdMutationBody = IndicatorFieldRequest;
export type PutIndicatorFieldsIdMutationError = ErrorType<Error>;

export const usePutIndicatorFieldsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putIndicatorFieldsId>>,
    TError,
    { id: number; data: IndicatorFieldRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutIndicatorFieldsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteIndicatorFieldsId = (id: number) => {
  return API<number>({ url: `/indicator-fields/${id}`, method: 'delete' });
};

export const getDeleteIndicatorFieldsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteIndicatorFieldsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteIndicatorFieldsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteIndicatorFieldsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteIndicatorFieldsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteIndicatorFieldsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteIndicatorFieldsId>>
>;

export type DeleteIndicatorFieldsIdMutationError = ErrorType<Error>;

export const useDeleteIndicatorFieldsId = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteIndicatorFieldsId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteIndicatorFieldsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
