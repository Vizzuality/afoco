/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  InterventionTypeListResponse,
  Error,
  GetInterventionTypesParams,
  InterventionTypeResponse,
  InterventionTypeRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getInterventionTypes = (params?: GetInterventionTypesParams, signal?: AbortSignal) => {
  return API<InterventionTypeListResponse>({
    url: `/intervention-types`,
    method: 'get',
    params,
    signal,
  });
};

export const getGetInterventionTypesQueryKey = (params?: GetInterventionTypesParams) =>
  [`/intervention-types`, ...(params ? [params] : [])] as const;

export const getGetInterventionTypesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getInterventionTypes>>,
  TError = ErrorType<Error>
>(
  params?: GetInterventionTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getInterventionTypes>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInterventionTypes>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInterventionTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInterventionTypes>>> = ({
    signal,
    pageParam,
  }) => getInterventionTypes({ 'pagination[page]': pageParam, ...params }, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetInterventionTypesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInterventionTypes>>
>;
export type GetInterventionTypesInfiniteQueryError = ErrorType<Error>;

export const useGetInterventionTypesInfinite = <
  TData = Awaited<ReturnType<typeof getInterventionTypes>>,
  TError = ErrorType<Error>
>(
  params?: GetInterventionTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getInterventionTypes>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetInterventionTypesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetInterventionTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getInterventionTypes>>,
  TError = ErrorType<Error>
>(
  params?: GetInterventionTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getInterventionTypes>>, TError, TData>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getInterventionTypes>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInterventionTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInterventionTypes>>> = ({ signal }) =>
    getInterventionTypes(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetInterventionTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInterventionTypes>>
>;
export type GetInterventionTypesQueryError = ErrorType<Error>;

export const useGetInterventionTypes = <
  TData = Awaited<ReturnType<typeof getInterventionTypes>>,
  TError = ErrorType<Error>
>(
  params?: GetInterventionTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getInterventionTypes>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetInterventionTypesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postInterventionTypes = (interventionTypeRequest: InterventionTypeRequest) => {
  return API<InterventionTypeResponse>({
    url: `/intervention-types`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: interventionTypeRequest,
  });
};

export const getPostInterventionTypesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postInterventionTypes>>,
    TError,
    { data: InterventionTypeRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postInterventionTypes>>,
  TError,
  { data: InterventionTypeRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postInterventionTypes>>,
    { data: InterventionTypeRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postInterventionTypes(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostInterventionTypesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postInterventionTypes>>
>;
export type PostInterventionTypesMutationBody = InterventionTypeRequest;
export type PostInterventionTypesMutationError = ErrorType<Error>;

export const usePostInterventionTypes = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postInterventionTypes>>,
    TError,
    { data: InterventionTypeRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostInterventionTypesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getInterventionTypesId = (id: number, signal?: AbortSignal) => {
  return API<InterventionTypeResponse>({ url: `/intervention-types/${id}`, method: 'get', signal });
};

export const getGetInterventionTypesIdQueryKey = (id: number) =>
  [`/intervention-types/${id}`] as const;

export const getGetInterventionTypesIdInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getInterventionTypesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getInterventionTypesId>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInterventionTypesId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInterventionTypesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInterventionTypesId>>> = ({ signal }) =>
    getInterventionTypesId(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetInterventionTypesIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInterventionTypesId>>
>;
export type GetInterventionTypesIdInfiniteQueryError = ErrorType<Error>;

export const useGetInterventionTypesIdInfinite = <
  TData = Awaited<ReturnType<typeof getInterventionTypesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getInterventionTypesId>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetInterventionTypesIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetInterventionTypesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getInterventionTypesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getInterventionTypesId>>, TError, TData>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getInterventionTypesId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInterventionTypesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInterventionTypesId>>> = ({ signal }) =>
    getInterventionTypesId(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetInterventionTypesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInterventionTypesId>>
>;
export type GetInterventionTypesIdQueryError = ErrorType<Error>;

export const useGetInterventionTypesId = <
  TData = Awaited<ReturnType<typeof getInterventionTypesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getInterventionTypesId>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetInterventionTypesIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putInterventionTypesId = (
  id: number,
  interventionTypeRequest: InterventionTypeRequest
) => {
  return API<InterventionTypeResponse>({
    url: `/intervention-types/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: interventionTypeRequest,
  });
};

export const getPutInterventionTypesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putInterventionTypesId>>,
    TError,
    { id: number; data: InterventionTypeRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putInterventionTypesId>>,
  TError,
  { id: number; data: InterventionTypeRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putInterventionTypesId>>,
    { id: number; data: InterventionTypeRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putInterventionTypesId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutInterventionTypesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putInterventionTypesId>>
>;
export type PutInterventionTypesIdMutationBody = InterventionTypeRequest;
export type PutInterventionTypesIdMutationError = ErrorType<Error>;

export const usePutInterventionTypesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putInterventionTypesId>>,
    TError,
    { id: number; data: InterventionTypeRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutInterventionTypesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteInterventionTypesId = (id: number) => {
  return API<number>({ url: `/intervention-types/${id}`, method: 'delete' });
};

export const getDeleteInterventionTypesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteInterventionTypesId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteInterventionTypesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteInterventionTypesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteInterventionTypesId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteInterventionTypesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteInterventionTypesId>>
>;

export type DeleteInterventionTypesIdMutationError = ErrorType<Error>;

export const useDeleteInterventionTypesId = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteInterventionTypesId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteInterventionTypesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
