/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  CountryIndicatorFieldListResponse,
  Error,
  GetCountryIndicatorFieldsParams,
  CountryIndicatorFieldResponse,
  CountryIndicatorFieldRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getCountryIndicatorFields = (
  params?: GetCountryIndicatorFieldsParams,
  signal?: AbortSignal
) => {
  return API<CountryIndicatorFieldListResponse>({
    url: `/country-indicator-fields`,
    method: 'get',
    params,
    signal,
  });
};

export const getGetCountryIndicatorFieldsQueryKey = (params?: GetCountryIndicatorFieldsParams) =>
  [`/country-indicator-fields`, ...(params ? [params] : [])] as const;

export const getGetCountryIndicatorFieldsInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getCountryIndicatorFields>>,
  TError = ErrorType<Error>
>(
  params?: GetCountryIndicatorFieldsParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getCountryIndicatorFields>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCountryIndicatorFields>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCountryIndicatorFieldsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountryIndicatorFields>>> = ({
    signal,
    pageParam,
  }) => getCountryIndicatorFields({ 'pagination[page]': pageParam, ...params }, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetCountryIndicatorFieldsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCountryIndicatorFields>>
>;
export type GetCountryIndicatorFieldsInfiniteQueryError = ErrorType<Error>;

export const useGetCountryIndicatorFieldsInfinite = <
  TData = Awaited<ReturnType<typeof getCountryIndicatorFields>>,
  TError = ErrorType<Error>
>(
  params?: GetCountryIndicatorFieldsParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getCountryIndicatorFields>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCountryIndicatorFieldsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetCountryIndicatorFieldsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCountryIndicatorFields>>,
  TError = ErrorType<Error>
>(
  params?: GetCountryIndicatorFieldsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCountryIndicatorFields>>, TError, TData>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getCountryIndicatorFields>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCountryIndicatorFieldsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountryIndicatorFields>>> = ({
    signal,
  }) => getCountryIndicatorFields(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetCountryIndicatorFieldsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCountryIndicatorFields>>
>;
export type GetCountryIndicatorFieldsQueryError = ErrorType<Error>;

export const useGetCountryIndicatorFields = <
  TData = Awaited<ReturnType<typeof getCountryIndicatorFields>>,
  TError = ErrorType<Error>
>(
  params?: GetCountryIndicatorFieldsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCountryIndicatorFields>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCountryIndicatorFieldsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postCountryIndicatorFields = (
  countryIndicatorFieldRequest: CountryIndicatorFieldRequest
) => {
  return API<CountryIndicatorFieldResponse>({
    url: `/country-indicator-fields`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: countryIndicatorFieldRequest,
  });
};

export const getPostCountryIndicatorFieldsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCountryIndicatorFields>>,
    TError,
    { data: CountryIndicatorFieldRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCountryIndicatorFields>>,
  TError,
  { data: CountryIndicatorFieldRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCountryIndicatorFields>>,
    { data: CountryIndicatorFieldRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postCountryIndicatorFields(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCountryIndicatorFieldsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCountryIndicatorFields>>
>;
export type PostCountryIndicatorFieldsMutationBody = CountryIndicatorFieldRequest;
export type PostCountryIndicatorFieldsMutationError = ErrorType<Error>;

export const usePostCountryIndicatorFields = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCountryIndicatorFields>>,
    TError,
    { data: CountryIndicatorFieldRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostCountryIndicatorFieldsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getCountryIndicatorFieldsId = (id: number, signal?: AbortSignal) => {
  return API<CountryIndicatorFieldResponse>({
    url: `/country-indicator-fields/${id}`,
    method: 'get',
    signal,
  });
};

export const getGetCountryIndicatorFieldsIdQueryKey = (id: number) =>
  [`/country-indicator-fields/${id}`] as const;

export const getGetCountryIndicatorFieldsIdInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getCountryIndicatorFieldsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getCountryIndicatorFieldsId>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryOptions<
  Awaited<ReturnType<typeof getCountryIndicatorFieldsId>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCountryIndicatorFieldsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountryIndicatorFieldsId>>> = ({
    signal,
  }) => getCountryIndicatorFieldsId(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetCountryIndicatorFieldsIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCountryIndicatorFieldsId>>
>;
export type GetCountryIndicatorFieldsIdInfiniteQueryError = ErrorType<Error>;

export const useGetCountryIndicatorFieldsIdInfinite = <
  TData = Awaited<ReturnType<typeof getCountryIndicatorFieldsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getCountryIndicatorFieldsId>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCountryIndicatorFieldsIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetCountryIndicatorFieldsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCountryIndicatorFieldsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCountryIndicatorFieldsId>>, TError, TData>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getCountryIndicatorFieldsId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCountryIndicatorFieldsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountryIndicatorFieldsId>>> = ({
    signal,
  }) => getCountryIndicatorFieldsId(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetCountryIndicatorFieldsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCountryIndicatorFieldsId>>
>;
export type GetCountryIndicatorFieldsIdQueryError = ErrorType<Error>;

export const useGetCountryIndicatorFieldsId = <
  TData = Awaited<ReturnType<typeof getCountryIndicatorFieldsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCountryIndicatorFieldsId>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCountryIndicatorFieldsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putCountryIndicatorFieldsId = (
  id: number,
  countryIndicatorFieldRequest: CountryIndicatorFieldRequest
) => {
  return API<CountryIndicatorFieldResponse>({
    url: `/country-indicator-fields/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: countryIndicatorFieldRequest,
  });
};

export const getPutCountryIndicatorFieldsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCountryIndicatorFieldsId>>,
    TError,
    { id: number; data: CountryIndicatorFieldRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putCountryIndicatorFieldsId>>,
  TError,
  { id: number; data: CountryIndicatorFieldRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putCountryIndicatorFieldsId>>,
    { id: number; data: CountryIndicatorFieldRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putCountryIndicatorFieldsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutCountryIndicatorFieldsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putCountryIndicatorFieldsId>>
>;
export type PutCountryIndicatorFieldsIdMutationBody = CountryIndicatorFieldRequest;
export type PutCountryIndicatorFieldsIdMutationError = ErrorType<Error>;

export const usePutCountryIndicatorFieldsId = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCountryIndicatorFieldsId>>,
    TError,
    { id: number; data: CountryIndicatorFieldRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutCountryIndicatorFieldsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteCountryIndicatorFieldsId = (id: number) => {
  return API<number>({ url: `/country-indicator-fields/${id}`, method: 'delete' });
};

export const getDeleteCountryIndicatorFieldsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCountryIndicatorFieldsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCountryIndicatorFieldsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCountryIndicatorFieldsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteCountryIndicatorFieldsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCountryIndicatorFieldsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCountryIndicatorFieldsId>>
>;

export type DeleteCountryIndicatorFieldsIdMutationError = ErrorType<Error>;

export const useDeleteCountryIndicatorFieldsId = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCountryIndicatorFieldsId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteCountryIndicatorFieldsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
