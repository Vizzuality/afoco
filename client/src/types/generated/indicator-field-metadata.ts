/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  IndicatorFieldMetadataListResponse,
  Error,
  GetIndicatorFieldMetadatasParams,
  IndicatorFieldMetadataResponse,
  IndicatorFieldMetadataRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getIndicatorFieldMetadatas = (
  params?: GetIndicatorFieldMetadatasParams,
  signal?: AbortSignal
) => {
  return API<IndicatorFieldMetadataListResponse>({
    url: `/indicator-field-metadatas`,
    method: 'get',
    params,
    signal,
  });
};

export const getGetIndicatorFieldMetadatasQueryKey = (params?: GetIndicatorFieldMetadatasParams) =>
  [`/indicator-field-metadatas`, ...(params ? [params] : [])] as const;

export const getGetIndicatorFieldMetadatasInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getIndicatorFieldMetadatas>>,
  TError = ErrorType<Error>
>(
  params?: GetIndicatorFieldMetadatasParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getIndicatorFieldMetadatas>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryOptions<
  Awaited<ReturnType<typeof getIndicatorFieldMetadatas>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIndicatorFieldMetadatasQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIndicatorFieldMetadatas>>> = ({
    signal,
    pageParam,
  }) => getIndicatorFieldMetadatas({ 'pagination[page]': pageParam, ...params }, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetIndicatorFieldMetadatasInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getIndicatorFieldMetadatas>>
>;
export type GetIndicatorFieldMetadatasInfiniteQueryError = ErrorType<Error>;

export const useGetIndicatorFieldMetadatasInfinite = <
  TData = Awaited<ReturnType<typeof getIndicatorFieldMetadatas>>,
  TError = ErrorType<Error>
>(
  params?: GetIndicatorFieldMetadatasParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getIndicatorFieldMetadatas>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetIndicatorFieldMetadatasInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetIndicatorFieldMetadatasQueryOptions = <
  TData = Awaited<ReturnType<typeof getIndicatorFieldMetadatas>>,
  TError = ErrorType<Error>
>(
  params?: GetIndicatorFieldMetadatasParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getIndicatorFieldMetadatas>>, TError, TData>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getIndicatorFieldMetadatas>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIndicatorFieldMetadatasQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIndicatorFieldMetadatas>>> = ({
    signal,
  }) => getIndicatorFieldMetadatas(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetIndicatorFieldMetadatasQueryResult = NonNullable<
  Awaited<ReturnType<typeof getIndicatorFieldMetadatas>>
>;
export type GetIndicatorFieldMetadatasQueryError = ErrorType<Error>;

export const useGetIndicatorFieldMetadatas = <
  TData = Awaited<ReturnType<typeof getIndicatorFieldMetadatas>>,
  TError = ErrorType<Error>
>(
  params?: GetIndicatorFieldMetadatasParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getIndicatorFieldMetadatas>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetIndicatorFieldMetadatasQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postIndicatorFieldMetadatas = (
  indicatorFieldMetadataRequest: IndicatorFieldMetadataRequest
) => {
  return API<IndicatorFieldMetadataResponse>({
    url: `/indicator-field-metadatas`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: indicatorFieldMetadataRequest,
  });
};

export const getPostIndicatorFieldMetadatasMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postIndicatorFieldMetadatas>>,
    TError,
    { data: IndicatorFieldMetadataRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postIndicatorFieldMetadatas>>,
  TError,
  { data: IndicatorFieldMetadataRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postIndicatorFieldMetadatas>>,
    { data: IndicatorFieldMetadataRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postIndicatorFieldMetadatas(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostIndicatorFieldMetadatasMutationResult = NonNullable<
  Awaited<ReturnType<typeof postIndicatorFieldMetadatas>>
>;
export type PostIndicatorFieldMetadatasMutationBody = IndicatorFieldMetadataRequest;
export type PostIndicatorFieldMetadatasMutationError = ErrorType<Error>;

export const usePostIndicatorFieldMetadatas = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postIndicatorFieldMetadatas>>,
    TError,
    { data: IndicatorFieldMetadataRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostIndicatorFieldMetadatasMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getIndicatorFieldMetadatasId = (id: number, signal?: AbortSignal) => {
  return API<IndicatorFieldMetadataResponse>({
    url: `/indicator-field-metadatas/${id}`,
    method: 'get',
    signal,
  });
};

export const getGetIndicatorFieldMetadatasIdQueryKey = (id: number) =>
  [`/indicator-field-metadatas/${id}`] as const;

export const getGetIndicatorFieldMetadatasIdInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getIndicatorFieldMetadatasId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getIndicatorFieldMetadatasId>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryOptions<
  Awaited<ReturnType<typeof getIndicatorFieldMetadatasId>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIndicatorFieldMetadatasIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIndicatorFieldMetadatasId>>> = ({
    signal,
  }) => getIndicatorFieldMetadatasId(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetIndicatorFieldMetadatasIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getIndicatorFieldMetadatasId>>
>;
export type GetIndicatorFieldMetadatasIdInfiniteQueryError = ErrorType<Error>;

export const useGetIndicatorFieldMetadatasIdInfinite = <
  TData = Awaited<ReturnType<typeof getIndicatorFieldMetadatasId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getIndicatorFieldMetadatasId>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetIndicatorFieldMetadatasIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetIndicatorFieldMetadatasIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getIndicatorFieldMetadatasId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getIndicatorFieldMetadatasId>>,
      TError,
      TData
    >;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getIndicatorFieldMetadatasId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIndicatorFieldMetadatasIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIndicatorFieldMetadatasId>>> = ({
    signal,
  }) => getIndicatorFieldMetadatasId(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetIndicatorFieldMetadatasIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getIndicatorFieldMetadatasId>>
>;
export type GetIndicatorFieldMetadatasIdQueryError = ErrorType<Error>;

export const useGetIndicatorFieldMetadatasId = <
  TData = Awaited<ReturnType<typeof getIndicatorFieldMetadatasId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getIndicatorFieldMetadatasId>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetIndicatorFieldMetadatasIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putIndicatorFieldMetadatasId = (
  id: number,
  indicatorFieldMetadataRequest: IndicatorFieldMetadataRequest
) => {
  return API<IndicatorFieldMetadataResponse>({
    url: `/indicator-field-metadatas/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: indicatorFieldMetadataRequest,
  });
};

export const getPutIndicatorFieldMetadatasIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putIndicatorFieldMetadatasId>>,
    TError,
    { id: number; data: IndicatorFieldMetadataRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putIndicatorFieldMetadatasId>>,
  TError,
  { id: number; data: IndicatorFieldMetadataRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putIndicatorFieldMetadatasId>>,
    { id: number; data: IndicatorFieldMetadataRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putIndicatorFieldMetadatasId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutIndicatorFieldMetadatasIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putIndicatorFieldMetadatasId>>
>;
export type PutIndicatorFieldMetadatasIdMutationBody = IndicatorFieldMetadataRequest;
export type PutIndicatorFieldMetadatasIdMutationError = ErrorType<Error>;

export const usePutIndicatorFieldMetadatasId = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putIndicatorFieldMetadatasId>>,
    TError,
    { id: number; data: IndicatorFieldMetadataRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutIndicatorFieldMetadatasIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteIndicatorFieldMetadatasId = (id: number) => {
  return API<number>({ url: `/indicator-field-metadatas/${id}`, method: 'delete' });
};

export const getDeleteIndicatorFieldMetadatasIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteIndicatorFieldMetadatasId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteIndicatorFieldMetadatasId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteIndicatorFieldMetadatasId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteIndicatorFieldMetadatasId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteIndicatorFieldMetadatasIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteIndicatorFieldMetadatasId>>
>;

export type DeleteIndicatorFieldMetadatasIdMutationError = ErrorType<Error>;

export const useDeleteIndicatorFieldMetadatasId = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteIndicatorFieldMetadatasId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteIndicatorFieldMetadatasIdMutationOptions(options);

  return useMutation(mutationOptions);
};
